/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package userinteface;

import dados.relatorios.DadosRelatorioCliente;
import dados.relatorios.DadosRelatorioEstado;
import dao.CompraDAO;
import java.sql.SQLException;
import java.text.DecimalFormat;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.table.DefaultTableModel;
import model.Compra;

/**
 *
 * @author renat
 */
public class RelatorioVendas extends javax.swing.JFrame {

    /**
     * Creates new form RelatorioVendas
     */
    public RelatorioVendas() {
        initComponents();
        carregarDados();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane1 = new javax.swing.JTabbedPane();
        painelTodas = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tabelaVendas = new javax.swing.JTable();
        header = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        boxProcurar = new javax.swing.JComboBox<>();
        jPanel2 = new javax.swing.JPanel();
        labelTotalFinal = new javax.swing.JLabel();
        painelClientes = new javax.swing.JPanel();
        jpanel = new javax.swing.JScrollPane();
        tabelaVendasPorCliente = new javax.swing.JTable();
        header1 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        boxProcurarPorCliente = new javax.swing.JComboBox<>();
        jPanel3 = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tabelaVendasPorEstado = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(500, 350));
        setPreferredSize(new java.awt.Dimension(600, 450));
        setSize(new java.awt.Dimension(600, 400));

        painelTodas.setLayout(new java.awt.BorderLayout());

        tabelaVendas.setAutoCreateRowSorter(true);
        tabelaVendas.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Número", "Data", "Cliente", "Valor Total", "Estado"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tabelaVendas);
        if (tabelaVendas.getColumnModel().getColumnCount() > 0) {
            tabelaVendas.getColumnModel().getColumn(4).setHeaderValue("Estado");
        }

        painelTodas.add(jScrollPane1, java.awt.BorderLayout.CENTER);

        header.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.CENTER, 5, 10));

        jLabel1.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel1.setText("Mostrar: ");
        header.add(jLabel1);

        boxProcurar.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Todas", "Não Canceladas", "Processamento", "Finalizada", "Canceladas", "" }));
        boxProcurar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                boxProcurarActionPerformed(evt);
            }
        });
        header.add(boxProcurar);

        painelTodas.add(header, java.awt.BorderLayout.PAGE_START);

        java.awt.FlowLayout flowLayout1 = new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT, 15, 15);
        flowLayout1.setAlignOnBaseline(true);
        jPanel2.setLayout(flowLayout1);

        labelTotalFinal.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        labelTotalFinal.setText("Total: ");
        jPanel2.add(labelTotalFinal);

        painelTodas.add(jPanel2, java.awt.BorderLayout.PAGE_END);

        jTabbedPane1.addTab("Todas", painelTodas);

        painelClientes.setLayout(new java.awt.BorderLayout());

        tabelaVendasPorCliente.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Valor Total", "Nome", "CPF", "Idade"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jpanel.setViewportView(tabelaVendasPorCliente);

        painelClientes.add(jpanel, java.awt.BorderLayout.CENTER);

        header1.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.CENTER, 5, 10));

        jLabel2.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel2.setText("Mostrar: ");
        header1.add(jLabel2);

        boxProcurarPorCliente.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Todas", "Não Canceladas", "Processamento", "Finalizada", "Canceladas", "" }));
        boxProcurarPorCliente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                boxProcurarPorClienteActionPerformed(evt);
            }
        });
        header1.add(boxProcurarPorCliente);

        painelClientes.add(header1, java.awt.BorderLayout.PAGE_START);

        java.awt.FlowLayout flowLayout2 = new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT, 15, 15);
        flowLayout2.setAlignOnBaseline(true);
        jPanel3.setLayout(flowLayout2);
        painelClientes.add(jPanel3, java.awt.BorderLayout.PAGE_END);

        jTabbedPane1.addTab("Por cliente", painelClientes);

        jPanel1.setLayout(new java.awt.BorderLayout());

        tabelaVendasPorEstado.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Estado", "Quantidade", "Porcentagem (qtd)", "Valor total", "Porcentagem (valor)"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(tabelaVendasPorEstado);

        jPanel1.add(jScrollPane2, java.awt.BorderLayout.CENTER);

        jTabbedPane1.addTab("Por estado ", jPanel1);

        getContentPane().add(jTabbedPane1, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void boxProcurarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_boxProcurarActionPerformed
        carregarVendas();
    }//GEN-LAST:event_boxProcurarActionPerformed

    private void boxProcurarPorClienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_boxProcurarPorClienteActionPerformed
        carregarVendasPorCliente();
    }//GEN-LAST:event_boxProcurarPorClienteActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(RelatorioVendas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(RelatorioVendas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(RelatorioVendas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(RelatorioVendas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new RelatorioVendas().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> boxProcurar;
    private javax.swing.JComboBox<String> boxProcurarPorCliente;
    private javax.swing.JPanel header;
    private javax.swing.JPanel header1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JScrollPane jpanel;
    private javax.swing.JLabel labelTotalFinal;
    private javax.swing.JPanel painelClientes;
    private javax.swing.JPanel painelTodas;
    private javax.swing.JTable tabelaVendas;
    private javax.swing.JTable tabelaVendasPorCliente;
    private javax.swing.JTable tabelaVendasPorEstado;
    // End of variables declaration//GEN-END:variables

    private void carregarDados() {
        carregarVendas();
        carregarVendasPorCliente();
        carregarVendasPorEstado();
    }
    private void carregarVendas(){
        ((DefaultTableModel)tabelaVendas.getModel()).setRowCount(0);
        try {
            CompraDAO compraDAO = new CompraDAO();
            List<Compra> compras = new ArrayList<>();
            switch (boxProcurar.getSelectedIndex()) {
                case 1:
                    compras = compraDAO.findAllNaoCancelada();
                    break;
                case 2:
                    compras = compraDAO.findAllCompra("Processamento");
                    break;
                case 3:
                    compras = compraDAO.findAllCompra("Finalizada");
                    break;
                case 4:
                    compras = compraDAO.findAllCompra("Cancelada");
                    break;
                default:
                    compras = compraDAO.findAllCompra();;
            }

            
            
            DefaultTableModel tableModel = (DefaultTableModel)tabelaVendas.getModel();
            double totalFinal = 0.0;
            DecimalFormat df = new DecimalFormat("#,###.##");
            for (Compra compra:compras){
                tableModel.addRow(new Object[]{compra.getNotaFiscal(), compra.getDataCompra(), compra.getCliente().getNome(), "R$"+df.format(compra.getValorTotal()), compra.getEstado()});
                totalFinal += compra.getValorTotal();
            }
            if (totalFinal > 0)
                labelTotalFinal.setText("Total (todas): R$" + df.format(totalFinal));
            else
                labelTotalFinal.setText("Nenhuma compra encontrada.");
                
            compraDAO.close();
        } catch (SQLException ex) {
            Logger.getLogger(RelatorioVendas.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    private void carregarVendasPorCliente(){
        ((DefaultTableModel)tabelaVendasPorCliente.getModel()).setRowCount(0);
        try {
            CompraDAO compraDAO = new CompraDAO();
            List<DadosRelatorioCliente> compras = new ArrayList<>();
            switch (boxProcurarPorCliente.getSelectedIndex()) {
                case 1:
                    compras = compraDAO.findComprasGroupByClienteNaoCancelada();
                    break;
                case 2:
                    compras = compraDAO.findComprasGroupByCliente("Processamento");
                    break;
                case 3:
                    compras = compraDAO.findComprasGroupByCliente("Finalizada");
                    break;
                case 4:
                    compras = compraDAO.findComprasGroupByCliente("Cancelada");
                    break;
                default:
                    compras = compraDAO.findComprasGroupByCliente("");;
            }

            DefaultTableModel tableModel = (DefaultTableModel)tabelaVendasPorCliente.getModel();

            DecimalFormat df = new DecimalFormat("#,###.##");
            for (DadosRelatorioCliente compra:compras){
                tableModel.addRow(new Object[]{"R$" + df.format(compra.getValortotal()), compra.getCliente().getNome(), compra.getCliente().getCpf() , compra.getCliente().getIdade()});
                
            }
            

            compraDAO.close();
        } catch (SQLException ex) {
            Logger.getLogger(RelatorioVendas.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    private void carregarVendasPorEstado(){
        ((DefaultTableModel)tabelaVendasPorEstado.getModel()).setRowCount(0);
        try {
            CompraDAO compraDAO = new CompraDAO();
            List<DadosRelatorioEstado> compras = new ArrayList<>();
            compras = compraDAO.findComprasByEstado();
            

            DefaultTableModel tableModel = (DefaultTableModel)tabelaVendasPorEstado.getModel();

            DecimalFormat df = new DecimalFormat("#,###.##");
            double totalValor = 0.0;
            int totalQuantidade = 0;
            for (DadosRelatorioEstado compra:compras){
                totalValor += compra.getValor();
                totalQuantidade += compra.getQuantidade();
            }
            
            for (DadosRelatorioEstado compra:compras){
                tableModel.addRow(new Object[]{compra.getEstado(),
                                               compra.getQuantidade(),
                                               df.format((double)compra.getQuantidade()*100/totalQuantidade)+"%",
                                               "R$" + df.format(compra.getValor()),
                                               df.format(compra.getValor()*100/totalValor)+"%"});
                
            }
            

            compraDAO.close();
        } catch (SQLException ex) {
            Logger.getLogger(RelatorioVendas.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
}
